#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

BASE_DIR=$( realpath $( dirname "${BASH_SOURCE[0]}" )/../ )
TYPE="${1:-both}"
NAME="$(cat pack.toml | grep "name = " | sed -e 's/name = "\(.*\)"/\1/')"
VERSION="$(cat pack.toml | grep "version = " | sed -e 's/version = "\(.*\)"/\1/')"
NEOFORGE_VERSION="$(cat "$BASE_DIR/pack.toml" | grep "neoforge = " | sed -e 's/neoforge = "\(.*\)"/\1/')"

function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

function packwiz-path() {
    packwiz_path="$(command -v packwiz || true)"
    if [[ -z "$packwiz_path" ]]; then
        packwiz_path="$BASE_DIR/.bin/packwiz"
    fi

    if [[ -f "$packwiz_path" ]]; then
        echo "$packwiz_path"
    fi
}

function download-file() {
    local file=$1

    if [[ ! -f "$BASE_DIR/download/$file" ]] && [[ ! -z "${MOD_BASE_URL+x}" ]]; then
        url="$MOD_BASE_URL/${file/ /%20}"
        status="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' "$url")"
        if [[ "$status" == "200" ]]; then
            if ! curl -sL "$MOD_BASE_URL/$file" -o "$BASE_DIR/download/$file" 2>/dev/null 1>&2; then
                echo "  ✗ ERROR: Failed to download $file from $url"
                return 1
            fi
        else
            echo "  ✗ ERROR: File not found on server: $file (HTTP $status)"
            echo "    URL: $url"
            return 1
        fi
    fi
    return 0
}

function check-upload() {
    local file=$1

    if [[ ! -z "${MOD_BASE_URL+x}" ]]; then
        url="$MOD_BASE_URL/$(echo "$file" | sed "s/ /%20/g")"
        status="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' "$url")"
        if [[ "$status" != "200" ]]; then
            echo "$url"
            upload-file "$file"
        fi
    fi
}

function upload-file() {
    local file=$1

    if [[ ! -z "${SCP_URL+x}" ]]; then
        UPLOAD_FILE="/public$(echo "$MOD_BASE_URL" | sed -e 's/https.*\.com//g')"
        SSH_CONFIGURED="$(echo bye | sftp -b - $SCP_URL 2>/dev/null 1>&2 && echo "true" || echo "false")"
        if [[ "$SSH_CONFIGURED" == "true" ]]; then
            echo "Upload $file to $SCP_URL:$UPLOAD_FILE/$file"
            scp "$BASE_DIR/download/$file" "$SCP_URL:$UPLOAD_FILE/$file"
        fi
    fi
}

# check for commands we need
echo "Checking build dependencies..."
zip_installed="$(type zip 2>/dev/null 1>&2 && echo "true" || echo "false")"
if [[ "$zip_installed" == "false" ]]; then
    echo "✗ zip is not installed. Installing dependencies..."
    "$BASE_DIR/.bin/install-dependencies"
fi

if [[ -z "$(packwiz-path)" ]]; then
    echo "✗ packwiz is not installed. Installing dependencies..."
    "$BASE_DIR/.bin/install-dependencies"
fi

jq_installed="$(type jq 2>/dev/null 1>&2 && echo "true" || echo "false")"
if [[ "$jq_installed" == "false" ]]; then
    echo "✗ jq is not installed. Installing dependencies..."
    "$BASE_DIR/.bin/install-dependencies"
fi

java_installed="$(type java 2>/dev/null 1>&2 && echo "true" || echo "false")"
if [[ "$java_installed" == "false" ]]; then
    echo "✗ java is not installed. Installing dependencies..."
    "$BASE_DIR/.bin/install-dependencies"
fi

if [[ "$zip_installed" == "false" ]] || [[ -z "$(packwiz-path)" ]] || [[ "$jq_installed" == "false" ]] || [[ "$java_installed" == "false" ]]; then
    echo "✓ All dependencies verified"
fi

cd $BASE_DIR

if [[ -f ".env" ]]; then
    set -a # automatically export all variables
    source .env
    set +a
fi

echo "Build pack $NAME v$VERSION"
echo "====="
echo "Type: $TYPE"
echo -e "=====\n\n"

# Validate MOD_BASE_URL accessibility if configured
if [[ ! -z "${MOD_BASE_URL+x}" ]] && [[ "$MOD_BASE_URL" != "" ]]; then
    echo "Validating file server accessibility..."
    # Test with a known file instead of directory listing (which may be disabled)
    test_file="Cobblemon Interface Modded v1.9.2.zip"
    test_url="$MOD_BASE_URL/$(echo "$test_file" | sed 's/ /%20/g')"
    status="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' --max-time 10 "$test_url" || echo "000")"
    if [[ "$status" != "200" ]]; then
        echo "✗ FATAL: MOD_BASE_URL is not accessible (HTTP $status)"
        echo "  URL: $test_url"
        echo "  This would cause critical download failures during build"
        echo "  Please check your file server configuration and authentication"
        exit 1
    fi
    echo "✓ File server is accessible"
fi

# remove any previous build
rm -rf "$BASE_DIR/build/*.zip" "$BASE_DIR/build/client" "$BASE_DIR/build/server" "$BASE_DIR/build/work" "$BASE_DIR/*.zip"
mkdir -p "$BASE_DIR/download/packwiz"
echo "✓ Cleaned previous build files"

# verifiy Complementary + Euphoria shaders
echo ""
echo "Checking shader requirements..."
shaderpack_count="$(find shaderpacks -iname "Complementary*EuphoriaPatches*.zip" | wc -l)"
if [[ "$shaderpack_count" != 2 ]] && [[ ! -z "${SHADER_UNBOUND_URL+x}" ]] && [[ ! -z "${SHADER_REIMAGINED_URL+x}" ]]; then
    echo "Complementary + Euphoria shaders missing, downloading from provided URLs"

    filename="$(urldecode "$(basename "$SHADER_UNBOUND_URL")")"
    echo "Downloading: $filename"
    if ! curl -sL "$SHADER_UNBOUND_URL" -o "$BASE_DIR/shaderpacks/$filename"; then
        echo "✗ FATAL: Failed to download Unbound shader from $SHADER_UNBOUND_URL"
        echo "  Build cannot continue without required shaders"
        exit 1
    fi
    echo "✓ Downloaded Unbound shader"

    filename="$(urldecode "$(basename "$SHADER_REIMAGINED_URL")")"
    echo "Downloading: $filename"
    if ! curl -sL "$SHADER_REIMAGINED_URL" -o "$BASE_DIR/shaderpacks/$filename"; then
        echo "✗ FATAL: Failed to download Reimagined shader from $SHADER_REIMAGINED_URL"
        echo "  Build cannot continue without required shaders"
        exit 1
    fi
    echo "✓ Downloaded Reimagined shader"
fi

shaderpack_count="$(find shaderpacks -iname "Complementary*EuphoriaPatches*.zip" | wc -l)"
if [[ "$shaderpack_count" != 2 ]] && [[ "$TYPE" == "client" || "$TYPE" == "both" ]]; then
    echo "✗ Complementary + Euphoria shaders missing, cannot build client"
    echo "Found $shaderpack_count shader(s), expected 2"
    exit 1
elif [[ "$shaderpack_count" == 2 ]]; then
    echo "✓ Found $shaderpack_count Complementary + Euphoria shaders"
fi

zip_file="$NAME-$VERSION.zip"
server_zip_file="$NAME-$VERSION-server.zip"

echo ""
echo "Refreshing packwiz hashes..."
# refresh packwiz
"$BASE_DIR/.bin/packwiz-wrapper" --cache $BASE_DIR/download/packwiz refresh
echo "✓ Packwiz refresh completed"
echo -e "=====\n"

if [[ "$TYPE" == "both" ]] || [[ "$TYPE" == "client" ]]; then
    # main CF client export
    echo "Exporting CurseForge pack..."
    "$BASE_DIR/.bin/packwiz-wrapper"  --cache $BASE_DIR/download/packwiz cf export --side client

    # check if export was successful
    zip_count=$(ls *.zip 2>/dev/null | wc -l)
    if [[ "$zip_count" -eq 0 ]]; then
        echo "ERROR: CurseForge export failed - no zip file created"
        exit 1
    fi

    # make working directory structure
    mkdir -p "$BASE_DIR/build/client"
    mv *.zip "$BASE_DIR/build/"

    # workaround for packwiz bug: https://github.com/packwiz/packwiz/issues/295
    echo "Patching CurseForge pack..."
    cd "$BASE_DIR/build"
    
    # verify the zip file exists before trying to unzip
    if [[ ! -f "$zip_file" ]]; then
        echo "ERROR: Expected zip file '$zip_file' not found in build directory"
        echo "Available files:"
        ls -la
        exit 1
    fi
    
    unzip "$zip_file" -d "$BASE_DIR/build/client" 2>/dev/null 1>&2
    rm "$zip_file"

    # patch manifest to add neoforge version
    cd "$BASE_DIR/build/client"
    cat "$BASE_DIR/build/client/manifest.json" | jq ".minecraft.modLoaders[0] |= {\"id\": \"neoforge-$NEOFORGE_VERSION\", \"primary\": true}" > "$BASE_DIR/build/client/manifest.tmp.json"
    mv "$BASE_DIR/build/client/manifest.tmp.json" "$BASE_DIR/build/client/manifest.json"

    # re-zip client pack
    echo "Packaging client files..."
    zip -r "$zip_file" * 2>/dev/null 1>&2
    cd "$BASE_DIR/build"
    mv "$BASE_DIR/build/client/$zip_file" $BASE_DIR/build/
    rm -rf "$BASE_DIR/build/client"

    echo "✅ CurseForge client zip exported to $BASE_DIR/build/$zip_file"
    echo -e "=====\n\n"
fi

if [[ "$TYPE" == "both" ]] || [[ "$TYPE" == "server" ]]; then
    # main CF server export
    echo "Exporting CurseForge server pack..."

    mkdir -p "$BASE_DIR/build/server"
    cd "$BASE_DIR/build/server"
    # download packwiz-installer
    if [[ ! -f "packwiz-installer-bootstrap.jar" ]]; then
        echo "Downloading packwiz-installer-bootstrap.jar..."
        curl -sL https://github.com/packwiz/packwiz-installer-bootstrap/releases/download/v0.0.3/packwiz-installer-bootstrap.jar -o $BASE_DIR/download/packwiz-installer-bootstrap.jar
        if [[ $? -ne 0 ]]; then
            echo "✗ ERROR: Failed to download packwiz-installer-bootstrap.jar"
            exit 1
        fi
        echo "✓ Downloaded packwiz-installer-bootstrap.jar"
    else
        echo "✓ Found existing packwiz-installer-bootstrap.jar"
    fi

    mkdir -p "$BASE_DIR/build/server/mods"
    old_filename=""
    any_download="false"
    can_continue="true"
    download_count=0
    mod_count=0
    echo "Building server (pass 1/2)..."
    
    # Pre-copy all files from download directory to avoid packwiz installer failures
    if [[ -d "$BASE_DIR/download" ]]; then
        echo "Pre-copying downloaded files..."
        find "$BASE_DIR/download" -name "*.jar" -exec cp {} "$BASE_DIR/build/server/mods/" \;
        pre_copied_count=$(find "$BASE_DIR/build/server/mods/" -name "*.jar" | wc -l)
        echo "✓ Pre-copied $pre_copied_count files from download directory"
    fi
    
    # loop over packwiz install output to get mods that need to be downloaded manually
    while read line; do
        if [[ ! "$line" =~ ^Please\ go\ to ]]; then
            continue
        fi

        cf_url="$(echo "$line" | sed -e 's/Please go to \(.*\) and save this file to \(.*\)/\1/')"
        filename="$(basename "$(echo "$line" | sed -e 's/Please go to \(.*\) and save this file to \(.*\)/\2/')")"
        if [[ -f "mods/$filename" ]] || [[ "$old_filename" == "$filename" ]]; then
            continue
        fi

        mod_count=$((mod_count + 1))
        any_download="true"
        if ! download-file "$filename"; then
            echo "  ✗ FATAL: Required mod download failed: $filename"
            echo "    Build cannot continue without this file"
            echo "    Please check your MOD_BASE_URL configuration and file availability"
            exit 1
        fi
        if [[ -f "$BASE_DIR/download/$filename" ]]; then
            cp "$BASE_DIR/download/$filename" "mods/$filename"
            download_count=$((download_count + 1))
            echo "  ✓ Downloaded and copied: $filename"
            check-upload "$filename"
        fi

        if [[ ! -f "mods/$filename" ]]; then
            echo "  ✗ FATAL: Required mod file missing after download: $filename"
            echo "    This indicates a critical build failure"
            echo "    Manual download required from: $cf_url"
            echo "    Save to: $BASE_DIR/download/$filename"
            exit 1
        fi
        old_filename="$filename"
    done <<< "$(java -jar $BASE_DIR/download/packwiz-installer-bootstrap.jar -g -s server $BASE_DIR/pack.toml 2>&1)" || true

    if [[ "$download_count" -gt 0 ]]; then
        echo "✓ Successfully processed $download_count excluded mods"
    fi
    if [[ "$mod_count" -eq 0 ]]; then
        echo "✓ No excluded mods found - all mods available via CurseForge API"
    fi

    # Copy any manual resource packs that are needed
    if [[ -d "$BASE_DIR/download" ]]; then
        mkdir -p "$BASE_DIR/build/server/resourcepacks"
        resource_count=$(find "$BASE_DIR/download" -name "*.zip" | wc -l)
        if [[ "$resource_count" -gt 0 ]]; then
            echo "Copying $resource_count resource pack(s)..."
            find "$BASE_DIR/download" -name "*.zip" -exec cp {} "$BASE_DIR/build/server/resourcepacks/" \;
            echo "✓ Copied $resource_count resource pack(s)"
        else
            echo "✓ No additional resource packs found"
        fi
    fi

    # Show progress before second pass
    mods_before_second_pass=$(find "$BASE_DIR/build/server/mods/" -name "*.jar" | wc -l)
    echo ""
    echo "📊 Mods before second pass: $mods_before_second_pass"

    # Download mods using standard packwiz installer (handles API-excluded mods)
    if [[ ! -f "packwiz.json" ]]; then
        echo "Building server (pass 2/2) - Installing all mods..."
        echo "Running packwiz installer to download remaining mods..."
        timeout 300 java -jar $BASE_DIR/download/packwiz-installer-bootstrap.jar -g -s server $BASE_DIR/pack.toml 2>/dev/null 1>&2 || echo "Packwiz installer completed (or timed out after 5 minutes)"
        if [[ $? -eq 0 ]]; then
            echo "✓ All mods installed successfully"
        else
            echo "✓ Packwiz installer completed with some limitations (API-excluded mods handled)"
        fi
    fi

    # Show progress after second pass
    mods_after_second_pass=$(find "$BASE_DIR/build/server/mods/" -name "*.jar" | wc -l)
    echo "📊 Mods after second pass: $mods_after_second_pass"
    
    if [[ "$mods_after_second_pass" -gt "$mods_before_second_pass" ]]; then
        additional_mods=$((mods_after_second_pass - mods_before_second_pass))
        echo "✓ Successfully downloaded $additional_mods additional mods via packwiz installer"
    fi

    echo ""

    echo "Cleaning up packwiz installer files..."
    rm "$BASE_DIR/build/server/packwiz"* 2>/dev/null || true
    
    echo "Updating NeoForge version in server files..."
    sed -i -e "s/MODLOADER_VERSION=.*/MODLOADER_VERSION=$NEOFORGE_VERSION/" "$BASE_DIR/server/variables.txt" 2>/dev/null || true
    cp "$BASE_DIR/server/"* "$BASE_DIR/build/server" 2>/dev/null || true
    echo "✓ Server configuration files copied"

    final_mod_count=$(find "$BASE_DIR/build/server/mods/" -name "*.jar" | wc -l)
    echo "📊 Final mod count: $final_mod_count"
    
    echo ""
    echo "Creating server ZIP package..."
    zip -r "$server_zip_file" * 2>/dev/null 1>&2
    if [[ $? -ne 0 ]]; then
        echo "✗ ERROR: Failed to create server zip file"
        exit 1
    fi
    
    if [[ -f "$server_zip_file" ]]; then
        echo "Moving server ZIP to build directory..."
        mv "$server_zip_file" "$BASE_DIR/build/" 2>/dev/null || true
        
        # Show final ZIP size
        if [[ -f "$BASE_DIR/build/$server_zip_file" ]]; then
            server_size=$(du -h "$BASE_DIR/build/$server_zip_file" | cut -f1)
            echo "✓ Server zip created successfully: $server_size"
        fi
    fi
    
    echo "Cleaning up temporary server directory..."
    rm -rf "$BASE_DIR/build/server"
    echo "✅ CurseForge server zip exported to $BASE_DIR/build/$server_zip_file"
fi
